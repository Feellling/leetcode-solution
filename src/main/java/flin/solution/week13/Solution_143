/**
 * 给定一个单链表 L：L0→L1→…→Ln-1→Ln ，
 * 将其重新排列后变为： L0→Ln→L1→Ln-1→L2→Ln-2→…
 * <p>
 * 你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。
 *
 * @author F_lin fengjunlin@sobey.com
 * @version 1.0
 * @since 2021/5/18
 */
public class Solution_143 {

    public static void main(String[] args) {
        ListNode l1 = new ListNode(1);
        ListNode l2 = new ListNode(2);
        ListNode l3 = new ListNode(3);
        ListNode l4 = new ListNode(4);
        ListNode l5 = new ListNode(5);
        l1.next = l2;
        l2.next = l3;
        l3.next = l4;
//        l4.next = l5;
        reorderList(l1);

        System.out.println(l1);
    }

    /**
     * 执行结果：
     * 通过
     * 显示详情
     * 添加备注
     *
     * 执行用时：
     * 531 ms
     * , 在所有 Java 提交中击败了
     * 5.12%
     * 的用户
     * 内存消耗：
     * 41 MB
     * , 在所有 Java 提交中击败了
     * 58.82%
     * 的用户
     */
    public static void reorderList(ListNode head) {
        if (head == null || head.next == null || head.next.next == null) {
            return;
        }

        ListNode pre = head.next, post = head.next.next, cParent = head;

        while (true) {
            while (true) {
                if (post.next == null) {
                    cParent.next = post;
                    cParent = cParent.next;
                    break;
                }
                if (post.next.next == null) {
                    cParent.next = post.next;
                    cParent = cParent.next;
                    post.next = null;
                    break;
                }
                post = post.next;
            }
            cParent.next = pre;
            cParent = cParent.next;
            pre = pre.next;
            if (pre == post) {
                if (cParent.next.next != null) {
                    cParent.next = null;
                }
                break;
            }
            post = pre.next;
        }
    }

    public static class ListNode {
        int val;
        ListNode next;

        ListNode() {
        }

        ListNode(int val) {
            this.val = val;
        }

        ListNode(int val, ListNode next) {
            this.val = val;
            this.next = next;
        }
    }
}
